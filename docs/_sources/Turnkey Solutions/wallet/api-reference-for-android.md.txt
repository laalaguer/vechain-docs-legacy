---
title: "API Reference for Android"
slug: "api-reference-for-android"
hidden: true
createdAt: "2019-04-15T10:45:47.936Z"
updatedAt: "2019-08-16T07:51:15.250Z"
---
The wallet function is implemented by calling SDK tool class: com.vechain.base.WalletUtils.

### SDK initialization

> SDK initialization
Inherit the android.app.Application class and implement the following methods:

```java
protected void attachBaseContext(Context base) {
        super.attachBaseContext(LanguageManager.setLocale(base));
        SdkManager.initSdkManager(this);

        //Set it as a test environment
        WalletUtils.setNodeUrl(NodeUrl.TEST);
 }
```

This code is required：
```java
SdkManager.initSdkManager(this);
```


#### Set node url

When app is released, it is set as a release environment:WalletUtils.setNodeUrl(NodeUrl.RELEASE);

Or if you have a corresponding node server, you can change it to your own node server:
```java
NodeUrl.CUSTOM.setUrl(coustomUrl);
WalletUtils.setNodeUrl(NodeUrl.CUSTOM);
```
            

Switching test node url:
```java
WalletUtils.setNodeUrl(NodeUrl.TEST);
```
If nodeUrl is not set, the default value is NodeUrl.RELEASE.
            

### Get node url
```java
String nodeUrl = WalletUtils.getNodeUrl();
```

#### Create Wallet
After entering the wallet password, the user can create the wallet through the following methods:

```java
WalletUtils.OnCreateWalletCallback callback = new WalletUtils.OnCreateWalletCallback() {
    @Override
    public void onCreate(WalletUtils.Wallet wallet) {

        closeDialog();

        if (wallet == null) {
            //fail
            createFail();

        }else {
            //success
            words = wallet.getWords();
            keystore = wallet.getKeystore();
            String privateKey = wallet.getPrivateKey();
            String address = wallet.getAddress();

            //Keystore is saved in files or databases
            FileUtils.writeCache(CreateWalletActivity.this, FileUtils.KEYSTORE_NAME, keystore);

            createSuccess();
        }
    }
};

WalletUtils.createWallet(password, callback);
```
When the wallet is created successfully, the wallet object is obtained:com.vechain.base.WalletUtils.Wallet.If the creation fails, WalletUtils.Wallet wallet is null.
After successful creation, keystore security can be cached to local files or databases.

####  Create wallet with mnemonic words

When the user has mnemonic words, enter the mnemonic words and the password of the keystore of the wallet to import the wallet. The method of using the mnemonic words as follows:

```java
WalletUtils.createWallet(words, password, new WalletUtils.OnCreateWalletCallback() {
            @Override
            public void onCreate(WalletUtils.Wallet wallet) {

                closeLoading();
                if(wallet!=null) {
                    keystore = wallet.getKeystore();
                    if (!TextUtils.isEmpty(keystore))
                       
                       //Keystore is saved in files or databases
                       //FileUtils.writeCache(getContext(), FileUtils.KEYSTORE_NAME, keystore);

                    //success
                    onImportSuccess();
                }else{
                    //errors
                    onImportWalletError(false);
                }
            }

        });
```

#### Verify the mnemonic words


```java
/**
 * Whether mnemonic words is valid or not
 *
 * @param The range of mnemonic words is limited to 12, 15, 18, 21 and 24.
 * @return Is it valid or not
 */
public static boolean isValidMnemonicWords(List<String> words)
```




#### Verify keystore format


```java
/**
 * Whether keystore for JSON format is correct or not
 *
 * @param keystore JSON encryption format for user wallet private key
 * @return Is the format correct or not?
 */
public static boolean isValidKeystore(String keystore)
```

#### Get address from keystore 


```java
/**
 * Get the address from the keystore
 *
 * @param keystoreJson
 * @return wallet address
 */
public static String getAddress(String keystoreJson)
```



#### Verify the keystore with password

 Verify that the keystore password is correct or not when the keystore is cached into local file or database.
```java
WalletUtils.verifyKeystorePassword(keystoreJson, password, new WalletUtils.OnVerifyPasswordCallback() {
            @Override
            public void onCheckPassword(boolean success) {
                if (success) {
                    //success
                    onImportSuccess();
                   
                   //Keystore is saved in files or databases
                   //FileUtils.writeCache(getActivity(), FileUtils.KEYSTORE_NAME, keystoreJson);
                } else {
                    //errors
                    onImportWalletError();
                }
            }
        });
```

####  Modify password of keystore



```java
WalletUtils.modifyKeystorePassword(keystoreJson, oldPassword, newPassword,
                new WalletUtils.OnModifyKeystorePasswordCallback() {
                    @Override
                    public void onModifyResult(String newKeystore) {

                        if (!TextUtils.isEmpty(newKeystore)) {
                            keystoreJson = newKeystore;
                           
                        //Keystore is saved in files or databases
                        //FileUtils.writeCache(getBaseContext(), FileUtils.KEYSTORE_NAME, newKeystore);

                            //success
                            onModifyPasswordSuccess();
                        } else {
                            //errors
                            onModifyPasswordError();
                        }
                    }
                });
```



####  Decrypt keystore


```java
/**
* Keystore decrypts private key
*
* @param keystoreJson
* @param password
* @param callback private key
*/
public static void decryptKeystore(final String keystoreJson, final String password,
                               final DecryptKeystoreCallback callback)
```



#### Encrypted private key


```java
/**
* Private key encryption generates keystore
*
* @param privateKey
* @param password
* @param callback keystore
*/
public static void encryptPrivateKey(final String privateKey, final String password,
                                 final EncryptPrivateKeyCallback callback)
```



#### Get checksum address

   
```java
/**
 * Generate wallet addresses in check format
 *
 * @param address Wallet address
 * @return Address with Check Format
 */
public static String getChecksumAddress(String address)
```

#### Sign Message

   
```java
/**
 * Wallet signature of information
 *
 * @param keystore Wallet keystore JSON format
 * @param password Keystore password
 * @param message Prepare the message to be signed
 * @return Signature information of byte [] of length 65
 * @throws CipherException
 * @throws ValidationException
 */
public static byte[] sign(String keystore, String password,
                               byte[] message) throws CipherException, ValidationException
```


#### Recover address


```java
/**
 * Recovering the address through the message and signature
 *
 * @param message   Data to be signed
 * @param signature  length is 65 bytes
 * @return Wallet address
 */
public static String recoverAddress(byte[] message, byte[] signature)
```

####  Get reference of block chain


```java
WalletUtils.getBlockReference(new WalletUtils.OnGetBlockReferenceCallback() {
    @Override
    public void onGetBlockReferenceResult(String blockRef) {
        blockReference = blockRef;
    }
});
```
####  Get chainTag of block chain


```java
WalletUtils.getChainTag(new WalletUtils.OnGetChainTagCallback() {
    @Override
    public void onGetChainTagResult(String chainTag) {
        this.chainTag = chainTag;
    }
});
```


####  Sign and send Transaction


```java
WalletUtils.signAndSendTransfer(keystoreJson, password, transferParameter, new WalletUtils.OnSignCallback() {
    @Override
    public void onSignResult(String txId) {

        if (transferResultListener != null)
            transferResultListener.onTransferResult(txId);


    }
});
```
After the transaction is sent, txId can be acquired. Through txId, the transaction status can be further acquired, and the success of the transaction can be confirmed by multiple blocks.

##### Examples of transaction parameter construction


```java
String hexNonce = null;
byte[] nonceBytes = new byte[8];
Random random = new Random();
random.nextBytes(nonceBytes);
hexNonce = Numeric.toHexString(nonceBytes);

TransferParameter.Builder builder = new TransferParameter.Builder();
TransferParameter transferParameter = null;
try {
    transferParameter = builder.setClauseList(clauseList)
            .setGas(gas)
            .setChainTag(chainTag)
            .setBlockReference(blockReference)
            .setNonce(hexNonce)
            .build();
} catch (ParameterException e) {
    e.printStackTrace();
}
```
TransferParameter attribute description：

- clauses : List<Clause> - Multi-transaction information

- gas : String  - Enforces the specified number as the maximum gas that can be consumed for the transaction

- chainTag : String - Genesis block ID last byte hexadecimal

- blockReference : String - Refer to the last 8 bytes of blockId in hexadecimal

- nonce : String  - The random number of trading entities. Changing Nonce can make the transaction have different IDs, which can be used to accelerate the trader.

- gasPriceCoef : String - This value adjusts the priority of the transaction, and the current value range is between 0 and 255 (decimal),The default value is "0"

- expiration : String - Deal expiration/expiration time in blocks,The default value is "720"

- dependsOn :String - The ID of the dependent transaction. If the field is not empty, the transaction will be executed only if the transaction specified by it already exists.The default value is null.

- reserveds: List  -  Currently empty, reserve fields. Reserved fields for backward compatibility,The default value is null



        
####  Sign transaction


```java
WalletUtils.signTransfer(keystoreJson, password, transferParameter, new WalletUtils.OnSignCallback() {
    @Override
    public void onSignResult(String raw) {
        //raw: RLP encode data and signature
    }
});

```





####  Support DApp development environment in Webview
To support the Dapp function, WebView needs the following initialization before opening Dapp.
Initialization is mainly JS injected into connex and web3.
[connex reference.](https://github.com/vechain/connex/blob/master/docs/api.md/)



```java
WebSettings set = webView.getSettings();
set.setJavaScriptEnabled(true);
set.setDomStorageEnabled(true);
String appCachePath = getApplication().getCacheDir().getAbsolutePath();
set.setAppCachePath(appCachePath);
set.setDatabaseEnabled(true);
CookieSyncManager.createInstance(this);
CookieManager cookieManager = CookieManager.getInstance();
cookieManager.setAcceptCookie(true);
webView.setWebChromeClient(new MyWebChromeClient());
```
MyWebChromeClient is implemented as follows. If you want to implement WebChromeClient, your WebChromeClient must inherit DappWebChromeClient.

 
```java
class MyWebChromeClient extends DappWebChromeClient {

    @Override
    public void onReceivedTitle(WebView view, String title) {
        //must be implemented to support the DApp environment
        super.onReceivedTitle(view,title);

        //......
    }

    @Override
    public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {

        //must be implemented to support the DApp environment
        return super.onJsPrompt(view,url,message,defaultValue,result);
    }

}
```

At the same time, the wallet must be initialized before calling WebView to open Url's corresponding Dapp, as follows：Implementing DAppAction Interface
        
```java
public class DAppWebActivity extends Activity implements DAppAction{
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ...
        //Support for DApp must be initialized
        WalletUtils.initDApp(this);
        ...
    }
    
    ...
    
       /**
     *  Interfaces that must be implemented to support the DApp environment
     *  App developer implementation when dapp calls checkOwn address function
     * @param address Address from dapp
     * @param callback Callback after the end
     */
    public void onCheckOwnAddress(String address, OwnedAddressCallback callback){

        //Read the wallet keystore from a file or database
        String keystore = FileUtils.readCache(this, FileUtils.KEYSTORE_NAME);
        final String walletAddress = WalletUtils.getAddress(keystore);
        boolean isOwn = walletAddress.equals(address);
        if(callback!=null)
            callback.onOwned(isOwn);
    }

    /**
     * Interfaces that must be implemented to support the DApp environment
     *
     * @param message  Information to be signed
     * @param callback Callback method after signature information is completed
     */
    @Override
    public void onCertificate(final String message, final String signer,final CertificateCallback callback) {
        //Interfaces that must be implemented to support the DApp environment
        //Read the wallet keystore from a file or database
        String keystore = FileUtils.readCache(this, FileUtils.KEYSTORE_NAME);
        final String walletAddress = WalletUtils.getAddress(keystore);

        // if signer not null, Enforces the specified address to sign the certificate
        if(signer!=null && !signer.equalsIgnoreCase(walletAddress)){
            if (callback != null) callback.onCertificate(null,null);
            return;
        }

        //Prompt user to enter wallet password
        CertificatePasswordDialog.takePassword(this, keystore, new CertificateSignListener() {
            @Override
            public void deliverCertificate(String signature) {
                // notify DApp
                if(callback!=null)callback.onCertificate(walletAddress,signature);
            }
        });
    }

    /**
     * Interfaces that must be implemented to support the DApp environment
     *
     * @param clauses
     * @param gas
     * @param callback Transaction Sending Completion Callback Method
     */
    @Override
    public void onTransfer(List<Clause> clauses, String gas, final String signer,final TransferResultCallback callback) {

        //Read the wallet keystore from a file or database
        String keystore = FileUtils.readCache(this, FileUtils.KEYSTORE_NAME);
        final String address = WalletUtils.getAddress(keystore);

        // if signer not null, Enforces the specified address to sign the transaction
        if(signer!=null && !signer.equalsIgnoreCase(address)){
            if(callback!=null)callback.onTransferResult(null,null);
            return;
        }

        PasswordDialog.showInputPassword(this, keystore, clauses, gas, new TransferResultListener() {
            @Override
            public void onTransferResult(String result) {

                if(callback!=null)callback.onTransferResult(address,result);
            }
        });

    }

    /**
     * Interfaces that must be implemented to support the DApp environment
     *
     * Get a list of wallet addresses from a local file or database
     *
     * @param callback Address list to DApp
     */
    @Override
    public void onGetWalletAddress(GetWalletAddressCallback callback) {
        //Get the wallet keystore from the local database or file cache
        String keystore = FileUtils.readCache(this, FileUtils.KEYSTORE_NAME);
        String address = WalletUtils.getAddress(keystore);

        //DApp must set addresses
        List<String> addresses = new ArrayList<>();
        addresses.add(address);

        //Callback method must be executed after completion
        if (callback != null) callback.setWalletAddress(addresses);
    }

    ....

}
```
When closing WebView, you can do the following:

```java
protected void onDestroy() {
        if (webView != null)
            webView.destroy();
        webView = null;
        //Memory Recycling to Prevent Memory Leakage
        WalletUtils.onDAppDestroy();

        super.onDestroy();
    }
```


## Several main data structures

### 1.keystore

```java
/**
*  Keystore is a json string. Its file structure is as follows:
*
*  — — — — — — — — — — — — — — — — — — — — — — — — — — ——
*      {
*          "version": 3,
*          "id": "F56FDA19-FB1B-4752-8EF6-E2F50A93BFB8",
*          "kdf": "scrypt",
*          "mac": "9a1a1db3b2735c36015a3893402b361d151b4d2152770f4a51729e3ac416d79f",
*          "cipher": "aes-128-ctr"
*          "address": "ea8a62180562ab3eac1e55ed6300ea7b786fb27d"
*          "crypto": {
*                      "ciphertext": "d2820582d2434751b83c2b4ba9e2e61d50fa9a8c9bb6af64564fc6df2661f4e0",
*                      "cipherparams": {
*                                          "iv": "769ef3174114a270f4a2678f6726653d"
*                                      },
*                      "kdfparams": {
*                              "r": 8,
*                              "p": 1,
*                              "n": 262144,
*                              "dklen": 32,
*                              "salt": "67b84c3b75f9c0bdf863ea8be1ac8ab830698dd75056b8133350f0f6f7a20590"
*                      },
*          },
*      }
*
*  — — — — — — — — — — — — — — — — — — — — — — — — — — ——
*  Field description:
*          version: This is a version information, when you decryption, you should use the same version.
*          id: You can ignore.
*          Kdf: This is a encryption function.
*          mac: This is the mac deveice infomation.
*          cipher: Describes the encryption algorithm used.
*          address：The wallet address.
*          crypto: This section is the main encryption area.
*
*  If you want to recover a wallet by keystore, you should have the correct password.
*
*/

```

### 2.Hexadecimal must start with 0x.

### 3.Address : 20 bytes hex string and start with 0x.